{{- $serverEnabled := (or (and (ne (.Values.server.enabled | toString) "-") .Values.server.enabled) (and (eq (.Values.server.enabled | toString) "-") .Values.global.enabled)) -}}
{{- if (and $serverEnabled .Values.externalServers.enabled) }}{{ fail "only one of server.enabled or externalServers.enabled can be set" }}{{ end -}}
{{- if (or $serverEnabled .Values.externalServers.enabled) }}
{{- if and .Values.global.acls.createReplicationToken (not .Values.global.acls.manageSystemACLs) }}{{ fail "if global.acls.createReplicationToken is true, global.acls.manageSystemACLs must be true" }}{{ end -}}
{{- if .Values.global.bootstrapACLs }}{{ fail "global.bootstrapACLs was removed, use global.acls.manageSystemACLs instead" }}{{ end -}}
{{- if .Values.global.acls.manageSystemACLs }}
{{- /* We don't render this job when server.updatePartition > 0 because that
    means a server rollout is in progress and this job won't complete unless
    the rollout is finished (which won't happen until the partition is 0).
    If we ran it in this case, then the job would not complete which would cause
    the server-acl-init-cleanup hook to run indefinitely which would cause the
    helm upgrade command to hang.
*/ -}}
{{- if eq (int .Values.server.updatePartition) 0 }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "consul.fullname" . }}-server-acl-init
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    {{- if .Values.global.extraLabels }}
      {{- toYaml .Values.global.extraLabels | nindent 4 }}
    {{- end }}
    {{- include "consul-service.defaultLabels" . | nindent 4 }}
    name: {{ template "consul.fullname" . }}-server-acl-init
    app.kubernetes.io/name: {{ template "consul.fullname" . }}-server-acl-init
    app.kubernetes.io/instance: {{ cat (printf "%s-server-acl-init"  (include "consul.fullname" .)) .Values.DELIMITER .Release.Namespace | nospace | trunc 63 }}
    app.kubernetes.io/technology: python
  annotations:
    "argocd.argoproj.io/hook": Sync
    "argocd.argoproj.io/sync-wave": "0"
    "argocd.argoproj.io/hook-delete-policy": HookSucceeded,BeforeHookCreation
spec:
  backoffLimit: 10
  template:
    metadata:
      name: {{ template "consul.fullname" . }}-server-acl-init
      labels:
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        release: {{ .Release.Name }}
        component: server-acl-init
        {{- with .Values.global.extraLabels }}
          {{- toYaml . | nindent 8 -}}
        {{- end }}
        name: {{ template "consul.fullname" . }}-server-acl-init
        app.kubernetes.io/name: {{ template "consul.fullname" . }}-server-acl-init
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      {{- if not (eq (include "openshift.enabled" .) "true") }}
      securityContext:
        {{- include "server.securityContext" . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      serviceAccountName: {{ template "consul.fullname" . }}-server-acl-init
      {{- if (or .Values.global.tls.enabled (and .Values.global.acls.replicationToken.secretName .Values.global.acls.replicationToken.secretKey) (and .Values.global.acls.bootstrapToken.secretName .Values.global.acls.bootstrapToken.secretKey)) }}
      volumes:
        {{- if .Values.global.tls.enabled }}
        - name: consul-ca-cert
          secret:
            secretName: {{ template "consul.caCertSecretName" . }}
            items:
              - key: {{ default "tls.crt" .Values.global.tls.caCert.secretKey }}
                path: tls.crt
        {{- end }}
        {{- if (and .Values.global.acls.bootstrapToken.secretName .Values.global.acls.bootstrapToken.secretKey) }}
        - name: bootstrap-token
          secret:
            secretName: {{ .Values.global.acls.bootstrapToken.secretName }}
            items:
              - key: {{ .Values.global.acls.bootstrapToken.secretKey }}
                path: bootstrap-token
        {{- else if (and .Values.global.acls.replicationToken.secretName .Values.global.acls.replicationToken.secretKey) }}
        - name: acl-replication-token
          secret:
            secretName: {{ .Values.global.acls.replicationToken.secretName }}
            items:
              - key: {{ .Values.global.acls.replicationToken.secretKey }}
                path: acl-replication-token
        {{- end }}
      {{- end }}
      containers:
        - name: server-acl-init-job
          image: {{ template "consul-k8s.image" . }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- include "consul.consulK8sConsulServerEnvVars" . | nindent 12 }}
          {{- if (or .Values.global.tls.enabled (and .Values.global.acls.replicationToken.secretName .Values.global.acls.replicationToken.secretKey) (and .Values.global.acls.bootstrapToken.secretName .Values.global.acls.bootstrapToken.secretKey)) }}
          volumeMounts:
            {{- if .Values.global.tls.enabled }}
            - name: consul-ca-cert
              mountPath: /consul/tls/ca
              readOnly: true
            {{- end }}
            {{- if (and .Values.global.acls.bootstrapToken.secretName .Values.global.acls.bootstrapToken.secretKey) }}
            - name: bootstrap-token
              mountPath: /consul/acl/tokens
              readOnly: true
            {{- else if (and .Values.global.acls.replicationToken.secretName .Values.global.acls.replicationToken.secretKey) }}
            - name: acl-replication-token
              mountPath: /consul/acl/tokens
              readOnly: true
            {{- end }}
           {{- end }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
              CONSUL_FULLNAME="{{template "consul.fullname" . }}"
              consul-k8s-control-plane server-acl-init \
                -resource-prefix=${CONSUL_FULLNAME} \
                -k8s-namespace={{ .Release.Namespace }} \
                -set-server-tokens={{ $serverEnabled }} \

                {{- if .Values.syncCatalog.enabled }}
                -sync-catalog=true \
                {{- if .Values.syncCatalog.consulNodeName }}
                -sync-consul-node-name={{ .Values.syncCatalog.consulNodeName }} \
                {{- end }}
                {{- end }}

                {{- if (or (and (ne (.Values.dns.enabled | toString) "-") .Values.dns.enabled) (and (eq (.Values.dns.enabled | toString) "-") .Values.global.enabled)) }}
                -allow-dns=true \
                {{- end }}
                {{- if or (or (and (ne (.Values.connectInject.enabled | toString) "-") .Values.connectInject.enabled) (and (eq (.Values.connectInject.enabled | toString) "-") .Values.global.enabled)) .Values.global.acls.createAuthMethod }}
                -connect-inject=true \
                {{- end }}
                {{- if and .Values.externalServers.enabled .Values.externalServers.k8sAuthMethodHost }}
                -auth-method-host={{ .Values.externalServers.k8sAuthMethodHost }} \
                {{- end }}
                {{- if .Values.meshGateway.enabled }}
                -mesh-gateway=true \
                {{- end }}
                {{- if .Values.connectInject.aclBindingRuleSelector }}
                -acl-binding-rule-selector={{ .Values.connectInject.aclBindingRuleSelector }} \
                {{- end }}
                {{- if (and .Values.server.enterpriseLicense.secretName .Values.server.enterpriseLicense.secretKey) }}
                -create-enterprise-license-token=true \
                {{- end }}
                {{- if .Values.backupDaemon.enabled }}
                -snapshot-agent=true \
                {{- end }}
                {{- if ne (.Values.client.enabled | toString) "true" }}
                -client=false \
                {{- end }}
                {{- if .Values.global.acls.createReplicationToken }}
                -create-acl-replication-token=true \
                {{- end }}
                {{- if .Values.global.federation.enabled }}
                -federation=true \
                {{- end }}
                {{- if .Values.global.acls.bootstrapToken.secretName }}
                -bootstrap-token-file=/consul/acl/tokens/bootstrap-token \
                {{- end }}
                {{- if .Values.global.federation.k8sAuthMethodHost }}
                -auth-method-host={{ .Values.global.federation.k8sAuthMethodHost }} \
                {{- end }}
                {{- if .Values.global.acls.replicationToken.secretName}}
                -acl-replication-token-file=/consul/acl/tokens/acl-replication-token \
                {{- end }}
                {{- if .Values.global.enableConsulNamespaces }}
                -enable-namespaces=true \
                {{- /* syncCatalog must be enabled to set sync flags */}}
                {{- if (or (and (ne (.Values.syncCatalog.enabled | toString) "-") .Values.syncCatalog.enabled) (and (eq (.Values.syncCatalog.enabled | toString) "-") .Values.global.enabled)) }}
                {{- if .Values.syncCatalog.consulNamespaces.consulDestinationNamespace }}
                -consul-sync-destination-namespace={{ .Values.syncCatalog.consulNamespaces.consulDestinationNamespace }} \
                {{- end }}
                {{- if .Values.syncCatalog.consulNamespaces.mirroringK8S }}
                -enable-sync-k8s-namespace-mirroring=true \
                {{- if .Values.syncCatalog.consulNamespaces.mirroringK8SPrefix }}
                -sync-k8s-namespace-mirroring-prefix={{ .Values.syncCatalog.consulNamespaces.mirroringK8SPrefix }} \
                {{- end }}
                {{- end }}
                {{- end }}
                {{- /* connectInject must be enabled to set inject flags */}}
                {{- if (or (and (ne (.Values.connectInject.enabled | toString) "-") .Values.connectInject.enabled) (and (eq (.Values.connectInject.enabled | toString) "-") .Values.global.enabled)) }}
                {{- if .Values.connectInject.consulNamespaces.consulDestinationNamespace }}
                -consul-inject-destination-namespace={{ .Values.connectInject.consulNamespaces.consulDestinationNamespace }} \
                {{- end }}
                {{- if .Values.connectInject.consulNamespaces.mirroringK8S }}
                -enable-inject-k8s-namespace-mirroring=true \
                {{- if .Values.connectInject.consulNamespaces.mirroringK8SPrefix }}
                -inject-k8s-namespace-mirroring-prefix={{ .Values.connectInject.consulNamespaces.mirroringK8SPrefix }} \
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
          resources:
            requests:
              memory: {{ default "100Mi" .Values.server.aclInit.resources.requests.memory }}
              cpu: {{ default "50m" .Values.server.aclInit.resources.requests.cpu }}
            limits:
              memory: {{ default "100Mi" .Values.server.aclInit.resources.limits.memory }}
              cpu: {{ default "50m" .Values.server.aclInit.resources.limits.cpu }}
          securityContext:
            {{- include "consul.globalContainerSecurityContext" . | nindent 12 }}
{{- end }}
{{- end }}
{{- end }}
