{{- if (or (and (ne (.Values.connectInject.enabled | toString) "-") .Values.connectInject.enabled) (and (eq (.Values.connectInject.enabled | toString) "-") .Values.global.enabled)) }}
{{- if and .Values.externalServers.enabled (not .Values.externalServers.hosts) }}{{ fail "externalServers.hosts must be set if externalServers.enabled is true" }}{{ end -}}
{{- if and .Values.externalServers.skipServerWatch (not .Values.externalServers.enabled) }}{{ fail "externalServers.enabled must be set if externalServers.skipServerWatch is true" }}{{ end -}}
# The deployment for running the Connect sidecar injector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "consul.fullname" . }}-connect-injector-webhook-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: connect-injector
    {{- with .Values.global.extraLabels }}
      {{- toYaml . | nindent 4 -}}
    {{- end }}
    name: {{ template "consul.fullname" . }}-connect-injector-webhook-deployment
    {{- include "consul-service.defaultLabels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "consul.fullname" . }}-connect-injector-webhook-deployment
    app.kubernetes.io/instance: {{ cat (printf "%s-connect-injector-webhook-deployment"  (include "consul.fullname" .)) .Values.DELIMITER .Release.Namespace | nospace | trunc 63 }}
    app.kubernetes.io/technology: go
spec:
  replicas: {{ .Values.connectInject.replicas }}
  selector:
    matchLabels:
      app: {{ template "consul.name" . }}
      chart: {{ template "consul.chart" . }}
      release: {{ .Release.Name }}
      component: connect-injector
  template:
    metadata:
      labels:
        {{- with .Values.global.extraLabels }}
          {{- toYaml . | nindent 8 -}}
        {{- end }}
        {{- with .Values.connectInject.extraLabels }}
          {{- toYaml . | nindent 8 -}}
        {{- end }}
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        release: {{ .Release.Name }}
        component: connect-injector
        restore-policy: restart
        name: {{ template "consul.fullname" . }}-connect-injector-webhook-deployment
        app.kubernetes.io/name: {{ template "consul.fullname" . }}-connect-injector-webhook-deployment
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      serviceAccountName: {{ template "consul.fullname" . }}-connect-injector
      {{- if not (eq (include "openshift.enabled" .) "true") }}
      securityContext:
        {{- include "consul.globalPodSecurityContext" . | nindent 8 }}
        {{- with .Values.connectInject.securityContext }}
        {{- toYaml . | nindent 8 -}}
        {{- end }}
      {{- end }}
      containers:
        - name: sidecar-injector
          image: {{ template "consul-k8s.image" . }}
          ports:
            - containerPort: 8080
              name: webhook-server
              protocol: TCP
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- include "consul.consulK8sConsulServerEnvVars" . | nindent 12 }}
            {{- if .Values.global.acls.manageSystemACLs }}
            - name: CONSUL_LOGIN_AUTH_METHOD
              {{- if and .Values.global.federation.enabled .Values.global.federation.primaryDatacenter }}
              value: {{ template "consul.fullname" . }}-k8s-component-auth-method-{{ .Values.global.datacenter }}
              {{- else }}
              value: {{ template "consul.fullname" . }}-k8s-component-auth-method
              {{- end }}
            - name: CONSUL_LOGIN_DATACENTER
              {{- if and .Values.global.federation.enabled .Values.global.federation.primaryDatacenter }}
              value: {{ .Values.global.federation.primaryDatacenter }}
              {{- else }}
              value: {{ .Values.global.datacenter }}
              {{- end }}
            - name: CONSUL_LOGIN_META
              value: "component=connect-injector,pod=$(NAMESPACE)/$(POD_NAME)"
            {{- end }}
            {{- if (and .Values.connectInject.aclInjectToken.secretName .Values.connectInject.aclInjectToken.secretKey) }}
            - name: CONSUL_ACL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.connectInject.aclInjectToken.secretName }}
                  key: {{ .Values.connectInject.aclInjectToken.secretKey }}
            {{- end }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
              consul-k8s-control-plane inject-connect \
                {{- if .Values.global.federation.enabled }}
                -enable-federation \
                {{- end }}
                -default-inject={{ .Values.connectInject.default }} \
                -consul-image="{{ template "consul.image" . }}" \
                -consul-dataplane-image="{{ template "consul-dataplane.image" . }}" \
                -consul-k8s-image="{{ template "consul-k8s.image" . }}" \
                -release-name="{{ .Release.Name }}" \
                -release-namespace="{{ .Release.Namespace }}" \
                -listen=:8080 \
                {{- if .Values.connectInject.transparentProxy.defaultEnabled }}
                -default-enable-transparent-proxy=true \
                {{- else }}
                -default-enable-transparent-proxy=false \
                {{- end }}
                {{- if (eq (include "openshift.enabled" .) "true") }}
                -enable-openshift \
                {{- end }}
                {{- if .Values.connectInject.transparentProxy.defaultOverwriteProbes }}
                -transparent-proxy-default-overwrite-probes=true \
                {{- else }}
                -transparent-proxy-default-overwrite-probes=false \
                {{- end }}
                {{- if (eq (include "openshift.enabled" .) "true") }}
                -enable-openshift \
                {{- end }}
                {{- if .Values.connectInject.logLevel }}
                -log-level={{ .Values.connectInject.logLevel }} \
                {{- end }}
                {{- if (or (and (ne (.Values.connectInject.metrics.defaultEnabled | toString) "-") .Values.connectInject.metrics.defaultEnabled) (and (eq (.Values.connectInject.metrics.defaultEnabled | toString) "-") .Values.global.metrics.enabled)) }}
                -default-enable-metrics=true \
                {{- else }}
                -default-enable-metrics=false \
                {{- end }}
                -enable-gateway-metrics={{ .Values.global.metrics.enableGatewayMetrics }}  \
                -default-enable-metrics-merging={{ .Values.connectInject.metrics.defaultEnableMerging }}  \
                -default-merged-metrics-port={{ .Values.connectInject.metrics.defaultMergedMetricsPort }} \
                -default-prometheus-scrape-port={{ .Values.connectInject.metrics.defaultPrometheusScrapePort }} \
                -default-prometheus-scrape-path="{{ .Values.connectInject.metrics.defaultPrometheusScrapePath }}" \
                {{- if .Values.connectInject.overrideAuthMethodName }}
                -acl-auth-method="{{ .Values.connectInject.overrideAuthMethodName }}" \
                {{- else if .Values.global.acls.manageSystemACLs }}
                -acl-auth-method="{{ template "consul.fullname" . }}-k8s-auth-method" \
                {{- end }}
                {{- range $value := .Values.connectInject.k8sAllowNamespaces }}
                -allow-k8s-namespace="{{ $value }}" \
                {{- end }}
                {{- range $value := .Values.connectInject.k8sDenyNamespaces }}
                -deny-k8s-namespace="{{ $value }}" \
                {{- end }}
                {{- if .Values.global.enableConsulNamespaces }}
                -enable-namespaces=true \
                {{- if .Values.connectInject.consulNamespaces.consulDestinationNamespace }}
                -consul-destination-namespace={{ .Values.connectInject.consulNamespaces.consulDestinationNamespace }} \
                {{- end }}
                {{- if and .Values.global.enableConsulNamespaces .Values.connectInject.consulNamespaces.mirroringK8S }}
                -enable-k8s-namespace-mirroring=true \
                {{- if .Values.connectInject.consulNamespaces.mirroringK8SPrefix }}
                -k8s-namespace-mirroring-prefix={{ .Values.connectInject.consulNamespaces.mirroringK8SPrefix }} \
                {{- end }}
                {{- end }}
                {{- if .Values.global.acls.manageSystemACLs }}
                -consul-cross-namespace-acl-policy=cross-namespace-policy \
                {{- end }}
                {{- end }}
                -tls-cert-dir=/etc/connect-injector/certs \
                {{- $resources := .Values.connectInject.sidecarProxy.resources }}
                {{- /* kindIs is used here to differentiate between null and 0 */}}
                {{- if not (kindIs "invalid" $resources.limits.memory) }}
                -default-sidecar-proxy-memory-limit={{ $resources.limits.memory }} \
                {{- end }}
                {{- if not (kindIs "invalid" $resources.requests.memory) }}
                -default-sidecar-proxy-memory-request={{ $resources.requests.memory }} \
                {{- end }}
                {{- if not (kindIs "invalid" $resources.limits.cpu) }}
                -default-sidecar-proxy-cpu-limit={{ $resources.limits.cpu }} \
                {{- end }}
                {{- if not (kindIs "invalid" $resources.requests.cpu) }}
                -default-sidecar-proxy-cpu-request={{ $resources.requests.cpu }} \
                {{- end }}
                {{- if .Values.connectInject.initContainer }}
                {{- $initResources := .Values.connectInject.initContainer.resources }}
                {{- if not (kindIs "invalid" $initResources.limits.memory) }}
                -init-container-memory-limit={{ $initResources.limits.memory }} \
                {{- end }}
                {{- if not (kindIs "invalid" $initResources.requests.memory) }}
                -init-container-memory-request={{ $initResources.requests.memory }} \
                {{- end }}
                {{- if not (kindIs "invalid" $initResources.limits.cpu) }}
                -init-container-cpu-limit={{ $initResources.limits.cpu }} \
                {{- end }}
                {{- if not (kindIs "invalid" $initResources.requests.cpu) }}
                -init-container-cpu-request={{ $initResources.requests.cpu }} \
                {{- end }}
                {{- end }}
                {{- if and .Values.global.tls.enabled .Values.global.tls.enableAutoEncrypt }}
                -enable-auto-encrypt \
                {{- end }}
          startupProbe:
            httpGet:
              path: /readyz/ready
              port: 9445
              scheme: HTTP
            initialDelaySeconds: 30
            failureThreshold: 15
            periodSeconds: 2
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /readyz/ready
              port: 9445
              scheme: HTTP
            failureThreshold: 2
            initialDelaySeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /readyz/ready
              port: 9445
              scheme: HTTP
            failureThreshold: 2
            initialDelaySeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
          - name: certs
            mountPath: /etc/connect-injector/certs
            readOnly: true
          {{- if .Values.global.tls.enabled }}
          - name: consul-ca-cert
            mountPath: /consul/tls/ca
            readOnly: true
          {{- end }}
          {{- with .Values.connectInject.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- include "consul.globalContainerSecurityContext" . | nindent 12 }}
      volumes:
      - name: certs
        secret:
          defaultMode: 420
          secretName: {{ template "consul.fullname" . }}-connect-inject-webhook-cert
      {{- if .Values.global.tls.enabled }}
      {{- if not (and .Values.externalServers.enabled .Values.externalServers.useSystemRoots) }}
      - name: consul-ca-cert
        secret:
          secretName: {{ template "consul.caCertSecretName" . }}
          items:
          - key: {{ default "tls.crt" .Values.global.tls.caCert.secretKey }}
            path: tls.crt
      {{- end }}
      {{- end }}
      {{- if .Values.connectInject.priorityClassName }}
      priorityClassName: {{ .Values.connectInject.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.connectInject.nodeSelector }}
      nodeSelector:
        {{ .Values.connectInject.nodeSelector | toYaml | indent 8 | trim }}
      {{- end }}
      {{- if .Values.connectInject.affinity }}
      affinity:
        {{ tpl (.Values.connectInject.affinity | toYaml) . | indent 8 | trim }}
      {{- end }}
      {{- if .Values.connectInject.tolerations }}
      tolerations:
        {{ .Values.connectInject.tolerations | toYaml | indent 8 | trim }}
      {{- end }}
{{- end }}
