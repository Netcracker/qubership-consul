{{- if (and (or (and (ne (.Values.server.enabled | toString) "-") .Values.server.enabled) (and (eq (.Values.server.enabled | toString) "-") .Values.global.enabled)) (or (and (ne (.Values.ui.enabled | toString) "-") .Values.ui.enabled) (and (eq (.Values.ui.enabled | toString) "-") .Values.global.enabled))) }}
{{- if (and (ne ((include "consul.ingressEnabled" .) | toString) "-") (include "consul.ingressEnabled" .)) }}
{{- if not (empty .Values.ui.ingress.hosts) }}
{{- $uiService := (or (and (ne (.Values.ui.service.enabled | toString) "-") .Values.ui.service.enabled) (eq (.Values.ui.service.enabled | toString) "-")) }}
{{- $serviceName := ternary (printf "%s-%s" (include "consul.fullname" .) "ui") (printf "%s-%s" (include "consul.fullname" .) "server") $uiService }}
{{- $httpPort := ternary 80 8500 $uiService }}
{{- $httpsPort := ternary 443 8501 $uiService }}
{{- /* We use the kube version to determine if the apiVersion of networking.k8s.io should be v1 or v1beta1.
This is because while networks.k8s.io/v1 was introduced in Kubernetes v1.15+, the Ingress resource was
promoted to v1 only in Kubernetes v1.19+. This ensures the correct API version is chosen that supports
the Ingress resource. */}}
{{- if or ( gt .Capabilities.KubeVersion.Major "1" ) ( ge .Capabilities.KubeVersion.Minor "19" ) }}
apiVersion: networking.k8s.io/v1
{{- else }}
apiVersion: networking.k8s.io/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: {{ template "consul.fullname" . }}-ingress
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    {{- include "consul-service.defaultLabels" . | nindent 4 }}
    component: ui
  {{- if or .Values.ui.ingress.annotations (and .Values.global.tls.enabled .Values.global.tls.httpsOnly) }}
  annotations:
  {{- if and .Values.global.tls.enabled .Values.global.tls.httpsOnly }}
    nginx.ingress.kubernetes.io/backend-protocol: https
    nginx.ingress.kubernetes.io/proxy-ssl-verify: 'on'
    nginx.ingress.kubernetes.io/proxy-ssl-name: '{{ template "consul.fullname" . }}-server.{{ .Release.Namespace }}'
    nginx.ingress.kubernetes.io/proxy-ssl-secret: '{{ .Release.Namespace }}/{{ template "server.tlsSecretName" . }}'
  {{- end }}
  {{- if or .Values.ui.ingress.annotations }}
  {{ .Values.ui.ingress.annotations | toYaml | indent 4 | trim }}
  {{- end }}
  {{- end }}
spec:
  rules:
  {{ $global := .Values.global }}
  {{- if and (or ( gt .Capabilities.KubeVersion.Major "1" ) ( ge .Capabilities.KubeVersion.Minor "19" )) (.Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress") }}
  {{- range .Values.ui.ingress.hosts }}
  - host: {{ .host | quote }}
    http:
      paths:
      {{- range (.paths | default (list "/")) }}
      {{- if (and $global.tls.enabled $global.tls.httpsOnly) }}
      - backend:
          service:
            name: {{ $serviceName }}
            port:
              number: {{ $httpsPort }}
        path: {{ . }}
        pathType: Prefix
      {{- else }}
      - backend:
          service:
            name: {{ $serviceName }}
            port:
              number: {{ $httpPort }}
        path: {{ . }}
        pathType: Prefix
      {{- end }}
      {{- end }}
  {{- end }}
  {{- else }}
  {{- range .Values.ui.ingress.hosts }}
  - host: {{ .host | quote }}
    http:
      paths:
      {{- range (.paths | default (list "/")) }}
      {{- if (and $global.tls.enabled $global.tls.httpsOnly) }}
      - backend:
          serviceName: {{ $serviceName }}
          servicePort: {{ $httpsPort }}
        path: {{ . }}
      {{- else }}
      - backend:
          serviceName: {{ $serviceName }}
          servicePort: {{ $httpPort }}
        path: {{ . }}
      {{- end }}
      {{- end }}
  {{- end }}
  {{- end }}
  {{- if .Values.ui.ingress.tls }}
  tls:
  {{- toYaml .Values.ui.ingress.tls | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}